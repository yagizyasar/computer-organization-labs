CS224
1
1
Yağız Yaşar
21902951

Part 1: Accessing array elements in MIPS: Write a program to check if an array is a symmetric array.

.text 
# $s0 = array's first address, $s1 = array size, $s2 = array's last address
la $s0, array
lw $s1, arrsize
subi $s1, $s1, 1
sll $s1, $s1, 2
add $s2, $s1, $s0
la $t2, array
addi $t4, $s2, 4

# Printing the elements of the array
print_array:
  lw $t3, ($t2)
  li $v0, 1
  la $a0, 0($t3)
  syscall
  addi $t2, $t2, 4
  beq $t2, $t4, loop
  j print_array

# Testing if the array is symmetrical
loop:
   lw $t0, 0($s0)
   lw $t1, 0($s2)
   addi $s0, $s0, 4 #adding 4 to the first address
   subi $s2, $s2, 4 #subtracting 4 from the last address
   bne $t0, $t1, false
   ble $s2, $s0, true
   j loop


true:
  li $v0, 4
  la $a0, true_message
  syscall
  j done

false:
  li $v0, 4
  la $a0, false_message
  syscall
  j done
  
done:
  

.data
array: .word 1, 2, 3, 2, 1
arrsize: .word 5
true_message: .asciiz "\nThe above array is symmetric."
false_message: .asciiz "\nThe above array is not symmetric."


Part 2: Calculating an arithmetic expression in MIPS: Write a program to evaluate the following expression given: x = a * (b-c) % d

.text
# Printing the interface message for a
li $v0, 4
la $a0, message_a
syscall

# Reading the value for a
li $v0, 5
syscall
move $s0, $v0

# Printing the interface message for b
li $v0, 4
la $a0, message_b
syscall

# Reading the value for b
li $v0, 5
syscall
move $s1, $v0

# Printing the interface message for c
li $v0, 4
la $a0, message_c
syscall

# Reading the value for c
li $v0, 5
syscall
move $s2, $v0

# Printing the interface message for d
li $v0, 4
la $a0, message_d
syscall

# Reading the value for d
li $v0, 5
syscall
move $s3, $v0

sub $t0, $s1, $s2 #(b-c)
mult $s0, $t0 #a * (b-c)
mfhi $t1
sll $t1, $t1, 16
mflo $t2
or $t1, $t1, $t2

# Modulo operation by taking the remainder, HI
div $t1, $s3 
mfhi $t2

li $v0, 4
la $a0, message_result
syscall

li $v0, 1
la $a0, 0($t2)
syscall




.data
message_a: .asciiz "Please enter an integer for a.\n"
message_b: .asciiz "Please enter an integer for b.\n"
message_c: .asciiz "Please enter an integer for c.\n"
message_d: .asciiz "Please enter an integer for d.\n"
message_result: .asciiz "The result for a * (b - c) % d :\n"