CS224
2
1
YAĞIZ YAŞAR
21902951

#######################################
########## Start of 1st Part ##########
#######################################
##########       Text        ##########
#######################################

.text

main:
   la $a0, array
   lw $a1, arraySize
   jal PrintArray 
   
   la $a0, array
   lw $a1, arraySize
   jal CheckSymmetric   
   
   j symmetricMessage
   
   messageSent:        
   
   la $a0, array
   lw $a1, arraySize
   jal FindMinAndMax
   
   
   
   #moving values at $v0 and $v1 to $s0 and $s1
   add $s0, $v0, $zero 
   add $s1, $v1, $zero
   
   
   
   maxMinMessage:
      
      li $v0, 4
      la $a0, newLine
      syscall
      
      li $v0, 4
      la $a0, messageMaximum
      syscall
      
      li $v0, 1
      add $a0, $s0, $zero
      syscall
      
      li $v0, 4
      la $a0, newLine
      syscall
      
      li $v0, 4
      la $a0, messageMinimum
      syscall
      
      li $v0, 1
      add $a0, $s1, $zero
      syscall
      
      j done
      
      
   
PrintArray:
   addi $sp, $sp, -12
   sw $s0, 0($sp) #current address
   sw $s1, 4($sp) #arraysize
   sw $s2, 8($sp) #counter
   
   add $s0, $a0, $0
   
   add $s1, $a1, $0
   
   sll $s1, $s1, 2
   
   
   Print:
      li $v0, 1
      lw $a0, ($s0)
      syscall
  
      li $v0, 4 
      la $a0, space
      syscall
  
      addi $s2, $s2, 4 #counter incrementation
      addi $s0, $s0, 4 #current address change
  
      beq $s2, $s1, jump1 # while (counter != arraysize) 
  
      j Print
   
   jump1:
   
   
   lw $s2, 8($sp) #counter
   lw $s1, 4($sp) #arraysize
   lw $s0, 0($sp) #current address
   addi $sp, $sp, 12
   
 
   jr $ra
   
CheckSymmetric:
   addi $sp, $sp, -16 #allocating space for registers
   sw $s0, 0($sp) #counting from first address, counter1
   sw $s1, 4($sp) #counting from last address, counter2
   sw $s2, 8($sp) #value 1
   sw $s3, 12($sp) #value 1  
   
   add $s0, $a0, $zero
   
   #initializing s registers
   add $s1, $a1, $zero
   sll $s1, $s1, 2
   add $s1, $a0, $s1
   addi $s1, $s1, -4
   
   lw $s2, ($s0)
   lw $s3, ($s1)
   
   CheckValues:
      bne $s2, $s3, false
      ble $s0, $s1, true
      addi $s0, $s0, 4 #counter1 incrementation
      addi $s1, $s1, -4 #counter2 decrementation
      
      j CheckValues
      
      true:
         addi $v0, $zero, 1
      
         j jump2
      
      false:
         addi $v0, $zero, 0
      
      jump2:
      
         
   lw $s3, 16($sp)  
   lw $s2, 8($sp) 
   lw $s1, 4($sp) 
   lw $s0, 0($sp)
   addi $sp, $sp, 16 #deallocating space for registers
   
   
   jr $ra
    
   
FindMinAndMax:   
   addi $sp, $sp, -20
   sw $s0, 0($sp) #current address
   sw $s1, 4($sp) #current value
   sw $s2, 8($sp) #maximum
   sw $s3, 12($sp) #minimum
   sw $s4, 16($sp) #last address of the array
   
   add $s0, $s0, $a0
   
   lw $s1, ($s0)
   lw $s2, ($s0)
   lw $s3, ($s0)
   
   add $s4, $s4, $a1
   sll $s4, $s4, 2
   add $s4, $s0, $s4



   CheckValues2:
      
      
      blt $s2, $s1, changeMax #changing max value if the current value is bigger
      bgt $s3, $s1, changeMin #changing min value if the current value is smaller
      
      maxMinJump:
      addi $s0, $s0, 4
      beq $s0, $s4, maxMinCheckDone
      lw $s1, ($s0)
     
      j CheckValues2
      
      changeMax:
         addi $s2, $s1, 0
     
         j maxMinJump
     
      changeMin:  
         addi $s3, $s1, 0 
     
         j maxMinJump 
      
   maxMinCheckDone:
      
   add $v0, $zero, $s2
   add $v1, $zero, $s3      
    
   lw $s4, 16($sp) 
   lw $s3, 12($sp)  
   lw $s2, 8($sp) 
   lw $s1, 4($sp) 
   lw $s0, 0($sp)
   addi $sp, $sp, 20
   
   jr $ra
   
   symmetricMessage:
   
      beq $v0, 0, printFalse
      
      printTrue:
         li $v0, 4
         la $a0, newLine
         syscall 
         
         li $v0, 4
         la $a0, messageTrue
         syscall

         j messageSent
         
      printFalse:
         li $v0, 4
         la $a0, newLine
         syscall
         li $v0, 4
         la $a0, messageFalse
         syscall
         
         j messageSent
   
         
done:

#######################################            
##########       Data        ##########
#######################################

.data

array: .word 1, 2, 3, 2, 1
arraySize: .word 5
space: .asciiz " "
messageTrue: .asciiz "The array is symmetric."
messageFalse: .asciiz "The array is not symmetric."
messageMaximum: .asciiz "The maximum value of the array:"
messageMinimum: .asciiz "The minimum value of the array: "
newLine: .asciiz "\n"





#######################################
########## Start of 2nd Part ##########
#######################################
##########       Text        ##########
#######################################
.text

li $v0, 4
la $a0, welcomeMessage 
syscall

li $v0, 4
la $a0, newLine 
syscall

li $v0, 5
syscall

addi $s0, $v0, 0

li $v0, 4
la $a0, hexMessage
syscall

li $v0, 34
addi $a0, $s0, 0
syscall     

move $a0, $s0

jal ReverseNumber

move $s0, $v0

li $v0, 4
la $a0, newLine 
syscall

li $v0, 4
la $a0, reversedMessage 
syscall

li $v0, 34
addi $a0, $s0, 0 
syscall

j done


 
ReverseNumber:
   addi $sp, $sp, -20
   sw $s0, 0($sp) #input
   sw $s1, 4($sp) #counter
   sw $s2, 8($sp) #32-bit number
   sw $s3, 12($sp) #reversed number - later $v0
   sw $s4, 16($sp) 
   
   addi $s0, $a0, 0 
   addi $s1, $s1, 0    
   addi $s2, $s2, 32   
   addi $s3, $s3, 0    
   
   loop:
      sll $s3, $s3, 1 	#shifting left the reversed value to left by 1
      andi $s4, $s0, 1	#current bit is on the right most bit
      xor $s3, $s3, $s4	
      srl $s0, $s0, 1	#shifting right the input value to get the next bit	
		
      addi $s1 $s1, 1	
      bne $s1, $s2, loop
    
    addi $v0, $s3, 0
    
    lw $s4, 16($sp) 
    lw $s3, 12($sp) 
    lw $s2, 8($sp)
    lw $s1, 4($sp) 
    lw $s0, 0($sp)  
    addi $sp, $sp, 20
    jr $ra

done:                  

#######################################            
##########       Data        ##########
#######################################
.data
welcomeMessage: .asciiz "Please enter an input."
hexMessage: .asciiz "Number's hexadecimal form is "
reversedMessage: .asciiz "Reversed hexadecimal form of the number is "
newLine: .asciiz "\n"
